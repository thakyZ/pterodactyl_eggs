name: palworld modded fetch file
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"
  push:
    branches:
      - master
    paths:
      - ./game_eggs/steamcmd_servers/palworld/**/*
env:
  DEBUG: true
jobs:
  check_file_update:
    name: Check For File Update
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      REPO_OWNER: "CuteNatalie"
      REPO_NAME: "Palworld-Modded-Server-Linux"
      REPO_URL: ""
      DoUpdate: ""
    steps:
      - run: |
          echo "REPO_URL=${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}" >> $GITHUB_ENV
      - name: Checkout Current Repository
        uses: actions/checkout@v4
        with:
          path: "current"
      - name: Checkout Documentation Repository
        uses: actions/checkout@v4
        if: ${{ env.REPO_URL != '' }}
        env:
          TOKEN: ${{ secrets.PAM }}
        with:
          repository: ${{ env.REPO_URL }}
          token: ${{ env.TOKEN }}
          path: "documentation"
      - name: Do Task
        shell: pwsh
        env:
          TOKEN: ${{ secrets.PAM }}
          pwsh_DEBUG: true
          pwsh_VERBOSE: true
          POWERSHELL_TELEMETRY_OPTOUT: 0
        run: |
          If ($env:pwsh_DEBUG -eq $True) {
            $DebugPreference = 'Continue'
          }
          If ($env:pwsh_VERBOSE -eq $True) {
            $VerbosePreference = 'Continue'
          }
          Try {
            $DocumentationDir = (Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "documentation");
            $InFilePath = (Join-Path -Path $DocumentationDir -ChildPath "README.md");
            $CurrentDir = (Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "current");
            $OutFilePath = (Join-Path -Path $CurrentDir -ChildPath "game_eggs" -AdditionalChildPath @("steamcmd_servers", "palworld", "binaries", "winmm.zip"));
            $Data = @{ Documentation = $Null; Current = $Null; };

            Push-Location -Path $DocumentationDir;
            $GitLogDataDocumentation = $(git log -1 --pretty="format:%ct" "$($InFilePath)")
            $Data.Documentation = [System.DateTimeOffset]::Parse("$($GitLogDataDocumentation)");
            Pop-Location;

            Push-Location -Path $CurrentDir;
            $GitLogDataCurrent = $(git log -1 --pretty="format:%ct" "$($OutFilePath)")
            $Data.Current = [System.DateTimeOffset]::Parse("$($GitLogDataCurrent)");
            Pop-Location;

            If ($env:DEBUG -eq $True) {
              Write-Host -ForegroundColor Blue -Object "Debug: " -NoNewLine;
              Write-Host -ForegroundColor White -Object "Documentation=" -NoNewLine;
              Write-Host -ForegroundColor Green -Object $Data.Documentation -NoNewLine;
              Write-Host -ForegroundColor Blue -Object " | " -NoNewLine;
              Write-Host -ForegroundColor White -Object "Current=" -NoNewLine;
              Write-Host -ForegroundColor Green -Object $Data.Current -NoNewLine;
              Write-Host -ForegroundColor Blue -Object " | " -NoNewLine;
              Write-Host -ForegroundColor White -Object "Boolean=" -NoNewLine;
              Write-Host -ForegroundColor Green -Object ($Data.Documentation -lt $Data.Current);
            }

            If ($Data.Documentation -lt $Data.Current) {
              $SelectedString = ((Get-Content $InFilePath|Select-String -Pattern "\[([^\]]+)\]\((https:\/\/[^\)]+)\)" -AllMatches).Matches.Groups|Select-Object @(@{Name="Alt";Expression={$Item = $_;Return @(($Item|Where-Object{$Group=($_ | Get-Member).Name;If($Group -Contains "Groups"){Return $True};Return $False}).Groups[1].Value)}},@{Name="Uri";Expression={$Item=$_;Return @(($Item|Where-Object{$Group=($_|Get-Member).Name;If($Group -Contains "Groups"){Return $True};Return $False}).Groups[2].Value)}})|Where-Object{If($Null -eq $_ -or $Null -eq $_.Uri){Return $False};Return $_.Uri.EndsWith("winmm.zip")});
              If ($Null -ne $SelectedString) {
                $DownloadLink = $SelectString.Url;
              } Else {
                Throw "Failed to get Uri to download winmm.zip"
              }
              Try {
                $Web = (Invoke-WebRequest -Uri "$($DownloadLink)" -UserAgent ([Microsoft.PowerShell.Commands.PSUserAgent]::Chrome) -SkipHttpErrorCheck -ErrorAction SilentlyContinue);
                If ($Web.StatusCode -eq 200) {
                  If (-not (Test-Path -Path $OutFilePath -PathType Leaf)) {
                    New-Item -ItemType File -Path $OutFilePath;
                  }
                  Set-Content $OutFilePath -Value $Web.Content -AsByteStream;
                } Else {
                  Throw "Failed to Invoke-WebRequest, got status code $($Web.StatusCode)";
                }
              } Catch {
                Write-Error -Message "Failed to download file from `"$($DownloadLink)`".";
                Throw;
              }
            } else {
              Write-Output "DoUpdate=0" >> $Env:GITHUB_OUTPUT
              Exit 0;
            }
          } Catch {
            Write-Host -ForgroundColor Red -Message "Failed to run PowerShell task. Exiting...`n$($_.Exception.Message)`n$($_.Exception.StackTrace)" | Out-Host;
            Write-Error -Message $_.Exception.Message -Exception $_.Exception | Out-Host;
            Exit 1;
          }
          Write-Output "DoUpdate=1" >> $Env:GITHUB_OUTPUT
          Write-Host "Completed successfully."
          Exit 0;
      - name: Finish Update
        if: ${{ env.DoUpdate != '' && env.DoUpdate != '0' }}
        uses: EndBug/add-and-commit@v9
        with:
          cwd: "./current"
          add: "./game_eggs/steamcmd_servers/palworld/binaries/winmm.zip"
          commit: --signoff
          default_author: github_actions
          message: "update: winmm.zip"
          pathspec_error_handling: exitImmediately
