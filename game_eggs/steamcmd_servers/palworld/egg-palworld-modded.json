{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2024-02-02T19:27:44-05:00",
    "name": "Palworld w\/ Frills",
    "author": "admin@nekogaming.xyz",
    "description": "Fight, farm, build and work alongside mysterious creatures called \"Pals\" in this completely new multiplayer, open world survival and crafting game!\r\nIncludes extra components.",
    "features": [
        "steam_disk_space"
    ],
    "docker_images": {
        "SteamCMD_Debian": "ghcr.io\/parkervcp\/steamcmd:debian",
        "Wine_Latest": "quay.io\/parkervcp\/pterodactyl-images:debian_wine",
        "SteamCMD_Proton": "ghcr.io\/parkervcp\/steamcmd:proton",
        "SteamCMD_Wine": "ghcr.io\/thakyz\/steamcmd:wine"
    },
    "file_denylist": [
        "PalServer.sh"
    ],
    "startup": ".\/PalworldServerConfigParser; (while read cmd; do rcon -s -a \"localhost:$RCON_PORT\" -p \"$ADMIN_PASSWORD\" \"$cmd\";done) < \/dev\/stdin & xvfb-run --auto-servernum wine \/home\/container\/PalServer\/Pal\/Binaries\/Linux\/PalServer-Win64-Test-Cmd.exe Pal EpicApp=PalServer -useperfthreads -NoAsyncLoadingThread -UseMultithreadForDS -publicip={{PUBLIC_IP}} -port={{SERVER_PORT}} -publicport={{SERVER_PORT}} -servername=\"{{SERVER_NAME}}\" -players={{MAX_PLAYERS}} $(if [ -n \"$SERVER_PASSWORD\" ]; then echo \"-serverpassword=\\\"${SERVER_PASSWORD}\\\"\"; fi) -adminpassword=\"{{ADMIN_PASSWORD}}\"",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": \"Event loop start\"\r\n}",
        "logs": "{}",
        "stop": "shutdown 15"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# steamcmd Base Installation Script\r\n#\r\n# Server Files: \/mnt\/server\r\n# Image to install with is 'debian:bookworm-slim'\r\n\r\nmain_function() {\r\n  ##\r\n  #\r\n  # Variables\r\n  # STEAM_USER, STEAM_PASS, STEAM_AUTH - Steam user setup. If a user has 2fa enabled it will most likely fail due to timeout. Leave blank for anon install.\r\n  # WINDOWS_INSTALL - if it's a windows server you want to install set to 1\r\n  # SRCDS_APPID - steam app id ffound here - https:\/\/developer.valvesoftware.com\/wiki\/Dedicated_Servers_List\r\n  # EXTRA_FLAGS - when a server has extra glas for things like beta installs or updates.\r\n  #\r\n  ##\r\n  export DEBIAN_FRONTEND=noninteractive\r\n  export WINDOWS_INSTALL=\"1\"\r\n\r\n  apt -y update\r\n  dpkg --add-architecture i386\r\n  apt -y --no-install-recommends install curl lib32gcc-s1 ca-certificates gnupg wget software-properties-common unzip gnupg2\r\n\r\n  ## just in case someone removed the defaults.\r\n  if [[ \"${STEAM_USER}\" == \"\" ]] || [[ \"${STEAM_PASS}\" == \"\" ]]; then\r\n      echo -e \"steam user is not set.\\n\"\r\n      echo -e \"Using anonymous user.\\n\"\r\n      export STEAM_USER=anonymous\r\n      export STEAM_PASS=\"\"\r\n      export STEAM_AUTH=\"\"\r\n  else\r\n      echo -e \"user set to ${STEAM_USER}\"\r\n  fi\r\n\r\n  if [[ \"${WINDOWS_INSTALL}\" == \"0\" ]]; then\r\n    ## download and install steamcmd\r\n    cd \/tmp || exit 1\r\n    mkdir -p \/mnt\/server\/steamcmd\r\n    curl -sSL -o steamcmd.tar.gz https:\/\/steamcdn-a.akamaihd.net\/client\/installer\/steamcmd_linux.tar.gz\r\n    tar -xzvf steamcmd.tar.gz -C \/mnt\/server\/steamcmd\r\n    cd \/mnt\/server\/steamcmd || exit 1\r\n\r\n    # SteamCMD fails otherwise for some reason, even running as root.\r\n    # This is changed at the end of the install process anyways.\r\n    chown -R root:root \/mnt\r\n    export HOME=\/mnt\/server\r\n\r\n    ## install game using steamcmd\r\n    WINDOWS_INSTALL_OPT=\"\"\r\n    if [[ \"${WINDOWS_INSTALL}\" == \"1\" ]]; then\r\n      WINDOWS_INSTALL_OPT=\"+@sSteamCmdForcePlatformType windows\"\r\n    fi\r\n    SRCDS_BETAID_OPT=\"\"\r\n    if [[ -z ${SRCDS_BETAID} ]]; then\r\n      SRCDS_BETAID_OPT=\"-beta ${SRCDS_BETAID}\"\r\n    fi\r\n    SRCDS_BETAPASS_OPT=\"\"\r\n    if [[ -z ${SRCDS_BETAPASS} ]]; then\r\n      SRCDS_BETAPASS_OPT=\"-beta ${SRCDS_BETAPASS}\"\r\n    fi\r\n    echo \".\/steamcmd.sh +force_install_dir \/mnt\/server\/PalServer +login ${STEAM_USER} ${STEAM_PASS} ${STEAM_AUTH} ${WINDOWS_INSTALL_OPT} +app_update ${SRCDS_APPID} ${SRCDS_BETAID_OPT} ${SRCDS_BETAPASS_OPT} ${INSTALL_FLAGS} validate +quit ## other flags may be needed depending on install. looking at you cs 1.6\"\r\n    .\/steamcmd.sh +force_install_dir \/mnt\/server\/PalServer +login ${STEAM_USER} ${STEAM_PASS} ${STEAM_AUTH} ${WINDOWS_INSTALL_OPT} +app_update ${SRCDS_APPID} ${SRCDS_BETAID_OPT} ${SRCDS_BETAPASS_OPT} ${INSTALL_FLAGS} validate +quit ## other flags may be needed depending on install. looking at you cs 1.6\r\n\r\n    ## set up 32 bit libraries\r\n    mkdir -p \/mnt\/server\/.steam\/sdk32\r\n    cp -v linux32\/steamclient.so ..\/.steam\/sdk32\/steamclient.so\r\n\r\n    ## set up 64 bit libraries\r\n    mkdir -p \/mnt\/server\/.steam\/sdk64\r\n    cp -v linux64\/steamclient.so ..\/.steam\/sdk64\/steamclient.so\r\n  else\r\n    ## install latest wine\r\n    mkdir -pm755 \/etc\/apt\/keyrings\r\n    wget -O \/etc\/apt\/keyrings\/winehq-archive.key https:\/\/dl.winehq.org\/wine-builds\/winehq.key\r\n    wget -NP \/etc\/apt\/sources.list.d\/ https:\/\/dl.winehq.org\/wine-builds\/debian\/dists\/bookworm\/winehq-bookworm.sources\r\n    apt update\r\n\r\n    ## libfaudio needed to install wine\r\n    #wget -nc https:\/\/download.opensuse.org\/repositories\/Emulators:\/Wine:\/Debian\/Debian_12\/amd64\/libfaudio0_20.01-0~buster_amd64.deb\r\n    #wget -nc https:\/\/download.opensuse.org\/repositories\/Emulators:\/Wine:\/Debian\/Debian_12\/i386\/libfaudio0_20.01-0~buster_i386.deb\r\n\r\n    #apt install -y .\/libfaudio0_20.01-0~buster_*\r\n\r\n    ## install wine, cabextract, and xvfb for winetricks\r\n    apt install -y --install-recommends winehq-stable cabextract xvfb\r\n\r\n    export WINEPREFIX=\/mnt\/server\/.wine\r\n    export WINEDLLOVERRIDES=\"mscoree,mshtml=\"\r\n    export DISPLAY=:0\r\n    export WINEARCH=win64\r\n    export WINEPREFIX=\\\/mnt\\\/server\\\/.wine\r\n    export DISPLAY_WIDTH=1024\r\n    export DISPLAY_HEIGHT=768\r\n    export DISPLAY_DEPTH=16\r\n    export AUTO_UPDATE=1\r\n    export XVFB=1\r\n\r\n    ## install winetricks\r\n    wget -q -O \/usr\/sbin\/winetricks https:\/\/raw.githubusercontent.com\/Winetricks\/winetricks\/master\/src\/winetricks \\\r\n    && chmod +x \/usr\/sbin\/winetricks\r\n\r\n    ## install vc redistributable\r\n    xvfb-run --auto-servernum winetricks -q vcrun2022\r\n\r\n    ## fix issues with startup.\r\n    if [[ ! -d \".wine\/drive_c\/users\/container\/AppData\" ]]; then\r\n      mkdir -p \"\/mnt\/server\/.wine\/drive_c\/users\/container\/AppData\"\r\n\r\n      if [[ ! -d \".wine\/drive_c\/users\/container\/AppData\/Local\" ]]; then\r\n        mkdir -p \"\/mnt\/server\/.wine\/drive_c\/users\/container\/AppData\/Local\"\r\n      fi\r\n    fi\r\n\r\n    ## download and install steamcmd\r\n    cd \/tmp || exit 1\r\n    mkdir -p \/mnt\/server\/steamcmd\r\n    curl -sSL -o steamcmd.tar.gz https:\/\/steamcdn-a.akamaihd.net\/client\/installer\/steamcmd_linux.tar.gz\r\n    tar -xzvf steamcmd.tar.gz -C \/mnt\/server\/steamcmd\r\n    cd \/mnt\/server\/steamcmd || exit 1\r\n\r\n    # SteamCMD fails otherwise for some reason, even running as root.\r\n    # This is changed at the end of the install process anyways.\r\n    chown -R root:root \/mnt\r\n    export HOME=\/mnt\/server\r\n\r\n    ## install game using steamcmd\r\n    .\/steamcmd.sh +force_install_dir \/mnt\/server\/PalServer +login ${STEAM_USER} ${STEAM_PASS} ${STEAM_AUTH} $( [[ \"${WINDOWS_INSTALL}\" == \"1\" ]] && printf %s '+@sSteamCmdForcePlatformType windows' ) +app_update ${SRCDS_APPID} $( [[ -z ${SRCDS_BETAID} ]] || printf %s \"-beta ${SRCDS_BETAID}\" ) $( [[ -z ${SRCDS_BETAPASS} ]] || printf %s \"-betapassword ${SRCDS_BETAPASS}\" ) ${INSTALL_FLAGS} validate +quit ## other flags may be needed depending on install. looking at you cs 1.6\r\n\r\n    ## set up 32 bit libraries\r\n    mkdir -p \/mnt\/server\/.steam\/sdk32\r\n    cp -v linux32\/steamclient.so ..\/.steam\/sdk32\/steamclient.so\r\n\r\n    ## set up 64 bit libraries\r\n    mkdir -p \/mnt\/server\/.steam\/sdk64\r\n    cp -v linux64\/steamclient.so ..\/.steam\/sdk64\/steamclient.so\r\n\r\n    # SteamCMD fails otherwise for some reason, even running as root.\r\n    # This is changed at the end of the install process anyways.\r\n    chown -R root:root \/mnt\r\n    export HOME=\/mnt\/server\r\n\r\n    # Setup windows\r\n    cd \/tmp || exit 1\r\n    curl -sSL -o \/tmp\/winmm.zip https:\/\/cdn.discordapp.com\/attachments\/1107095082567471114\/1200053412126003250\/winmm.zip\r\n    wget -O \/tmp\/ue4ss.zip https:\/\/github.com\/UE4SS-RE\/RE-UE4SS\/releases\/download\/experimental\/zDEV-UE4SS_v2.5.2-594-gc053439.zip\r\n    unzip \/tmp\/winmm.zip -d \/mnt\/server\/PalServer\/Pal\/Binaries\/Win64\r\n    rm \/tmp\/winmm.zip\r\n    unzip \/tmp\/ue4ss.zip -d \/mnt\/server\/PalServer\/Pal\/Binaries\/Win64\r\n    rm \/tmp\/ue4ss.zip\r\n\r\n    ## add below your custom commands if needed\r\n    ## copy template config file\r\n    echo \"Copy template config file into config folder!\"\r\n\r\n    if [ -f \"\/mnt\/server\/PalServer\/Pal\/Saved\/Config\/LinuxServer\/PalWorldSettings.ini\" ]; then\r\n        echo \"Config file already exists, backing up and overwriting with a new one\"\r\n        mv \/mnt\/server\/PalServer\/Pal\/Saved\/Config\/LinuxServer\/PalWorldSettings.ini \"\/mnt\/server\/PalServer\/Pal\/Saved\/Config\/LinuxServer\/PalWorldSettings_$(date +\"%Y%m%d%H%M%S\").ini\"\r\n        cp \/mnt\/server\/PalServer\/DefaultPalWorldSettings.ini \/mnt\/server\/PalServer\/Pal\/Saved\/Config\/LinuxServer\/PalWorldSettings.ini\r\n    else\r\n        echo \"Creating new config file\"\r\n        mkdir -p \/mnt\/server\/PalServer\/Pal\/Saved\/Config\/LinuxServer\r\n        cp \/mnt\/server\/PalServer\/DefaultPalWorldSettings.ini \/mnt\/server\/PalServer\/Pal\/Saved\/Config\/LinuxServer\/PalWorldSettings.ini\r\n    fi\r\n\r\n    cd \/mnt\/server || exit 1\r\n    # Download self made replace tool\r\n    echo \"Downloading config parser aplication\"\r\n    curl -sSL -o \/mnt\/server\/PalworldServerConfigParser https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/game_eggs\/steamcmd_servers\/palworld\/PalworldServerConfigParser-linux-amd64\r\n    chmod +x \/mnt\/server\/PalworldServerConfigParser\r\n\r\n    cd \/mnt\/server || exit 1\r\n    test_frills=0\r\n\r\n    if [[ $test_frills -eq 1 ]]; then\r\n      # Download self made replace tool\r\n      echo \"Downloading frills\"\r\n      mkdir \"\/mnt\/server\/.temp\"\r\n      frills=( \"319;dedicated_server_patch\" \"340;server_essentials\" )\r\n      for i in \"${frills[@]}\"; do\r\n        arr=(\"${i\/\/;\/ }\")\r\n        mod_id=${arr[0]}\r\n        mod_name=${arr[1]}\r\n        echo \"i: \\\"${i}\\\"\"\r\n        echo \"arr: \\\"${arr[*]}\\\"\"\r\n        echo \"mod_id: \\\"${mod_id}\\\"\"\r\n        echo \"mod_name: \\\"${mod_name}\\\"\"\r\n        file_list=\"$(curl -sSL -X \"GET\" -H \"accept: application\/json\" -H \"apikey: ${CURSEFORGE_API}\" -o \"\/mnt\/server\/.temp\/${mod_name}.zip\" \"https:\/\/api.nexusmods.com\/v1\/games\/palworld\/mods\/${mod_id}\/files.json?category=main\");\"\r\n        file_id=\"$(\"${file_list}\" | jq \\\".files[0].file_id\\\" )\"\r\n\r\n        chmod +x \"\/mnt\/server\/.temp\/${mod_name}.zip\" || exit 1\r\n\r\n        if [ -z \"$(which unzip)\" ]; then\r\n          echo \"Error: Failed to find command \\\"unzip\\\"\"\r\n          exit 1\r\n        fi\r\n\r\n        unzip \"\/mnt\/server\/.temp\/${mod_name}.zip\" || exit 1\r\n        rm \"\/mnt\/server\/.temp\/${mod_name}.zip\" || exit 1\r\n        if [[ -d \"\/mnt\/server\/.temp\/${mod_name}\/Pal\" ]]; then\r\n          if [[ -d \"\/mnt\/server\/.temp\/${mod_name}\/Pal\/Binaries\/Win64\" ]]; then\r\n            mv \"\/mnt\/server\/.temp\/${mod_name}\/Pal\/Binaries\/Win64\" \"\/mnt\/server\/.temp\/${mod_name}\/Pal\/Binaries\/Linux\"\r\n          fi\r\n          mv \"\/mnt\/server\/.temp\/${mod_name}\/Pal\" \"\/mnt\/server\/Pal\"\r\n        elif [[ -d \"\/mnt\/server\/.temp\/${mod_name}\/Scripts\" ]]; then\r\n          if [[ ! -d \"\/mnt\/server\/Binaries\/Linux\/Mods\" ]]; then\r\n            echo \"Error: UE4SS mods directory is non-existant.\"\r\n          else\r\n            mkdir \"\/mnt\/server\/PalServer\/Pal\/Binaries\/Linux\/Mods\/${mod_name}\"\r\n            mv \"\/mnt\/server\/.temp\/${mod_name}\/Scripts\" \"\/mnt\/server\/PalServer\/Pal\/Binaries\/Linux\/Mods\/${mod_name}\"\r\n            if [[ -d \"\/mnt\/server\/.temp\/${mod_name}\/enabled.txt\" ]]; then\r\n              mv \"\/mnt\/server\/.temp\/${mod_name}\/Scripts\" \"\/mnt\/server\/PalServer\/Pal\/Binaries\/Linux\/Mods\/${mod_name}\"\r\n            fi\r\n          fi\r\n        elif [[ -d \"\/mnt\/server\/.temp\/${mod_name}\/Paks\" ]]; then\r\n          mv \"\/mnt\/server\/.temp\/${mod_name}\/Paks\" \"\/mnt\/server\/PalServer\/Pal\/Content\"\r\n        else\r\n          echo \"Error: The mod, \\\"${mod_name}\\\" requires manual install at path \\`\/mnt\/server\/.temp\/${mod_name}\\`\"\r\n        fi\r\n      done\r\n\r\n      rm -r \"\/mnt\/server\/.temp\"\r\n    fi\r\n  fi\r\n\r\n  ## install end\r\n  echo \"-----------------------------------------\"\r\n  echo \"Installation completed...\"\r\n  echo \"-----------------------------------------\"\r\n}\r\n\r\nmain_function 2>&1 | tee \/mnt\/server\/install.log",
            "container": "debian:bookworm-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "App ID",
            "description": "Do not edit!",
            "env_variable": "SRCDS_APPID",
            "default_value": "2394010",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|in:2394010",
            "field_type": "text"
        },
        {
            "name": "Auto Update",
            "description": "Auto update the server on start.",
            "env_variable": "AUTO_UPDATE",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Max Players",
            "description": "",
            "env_variable": "MAX_PLAYERS",
            "default_value": "32",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|numeric|between:1,32",
            "field_type": "text"
        },
        {
            "name": "Server Name",
            "description": "",
            "env_variable": "SERVER_NAME",
            "default_value": "A Pterodactyl hosted Palworld Server",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:64",
            "field_type": "text"
        },
        {
            "name": "Server Password",
            "description": "If specified, players must provide this password to join the server.",
            "env_variable": "SERVER_PASSWORD",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|alpha_dash|between:1,30",
            "field_type": "text"
        },
        {
            "name": "Admin Password",
            "description": "If specified, players must provide this password (via the in-game chat or RCON) to gain access to administrator commands on the server.",
            "env_variable": "ADMIN_PASSWORD",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|alpha_dash|between:1,30",
            "field_type": "text"
        },
        {
            "name": "Public IP",
            "description": "Set this to the servers public ip address.",
            "env_variable": "PUBLIC_IP",
            "default_value": "",
            "user_viewable": true,
            "user_editable": false,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "RCON Port",
            "description": "Does not need to be allocated!",
            "env_variable": "RCON_PORT",
            "default_value": "25575",
            "user_viewable": true,
            "user_editable": false,
            "rules": "required|numeric",
            "field_type": "text"
        },
        {
            "name": "Enable RCON",
            "description": "Must Be ON",
            "env_variable": "RCON_ENABLE",
            "default_value": "True",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|in:True",
            "field_type": "text"
        },
        {
            "name": "bEnableInvaderEnemy",
            "description": "Turns off or on bEnableInvaderEnemy,\r\nCan be used to slow download memory leaks.\r\nOff should slow down the memory leaks.",
            "env_variable": "ENABLE_ENEMY",
            "default_value": "True",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|in:True,False",
            "field_type": "text"
        },
        {
            "name": "Server Description",
            "description": "The description of the server.",
            "env_variable": "SERVER_DESCRIPTION",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:128",
            "field_type": "text"
        },
        {
            "name": "Nexus Mods API Key",
            "description": "API key for Nexus mods to download the extra frills.\nUnused for now.",
            "env_variable": "NEXUS_API",
            "default_value": "",
            "user_viewable": false,
            "user_editable": false,
            "rules": "nullable|string|max:128",
            "field_type": "text"
        }
    ]
}
